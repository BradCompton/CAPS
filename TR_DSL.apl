    ∇ A TR_DSL S;I;M;J;X;lc;result;d8flow;transparent;buffer;head;ocean;cross;sm;psm;saltmarsh;W;targets;tr;asm;apsm;O;cutoff;d8accum;excluded;keepresults;result2;Q[1]   ⍝Watershed version of CAPS tidal restriction metric - DSL version for whole northeast[2]   ⍝We don't trust DSL dams, so ignore them[3]   ⍝⍺ = usual metric left arguments[4]   ⍝⍵ = (start-item number-of-items) (systems)[5]   ⍝Parameters:[6]   ⍝   targets         Table for tidal restriction watersheds[7]   ⍝   saltmarsh       Class for salt marshes[8]   ⍝   excluded        Systems to exclude: everything wetter than salt marsh (open water, etc.)[9]   ⍝   keepresults     Systems to keep results for; those in model + developed and grasslands[10]  ⍝   cutoff          Flowaccum cutoff for bridges too big to be a TR[11]  ⍝Results:[12]  ⍝   tr              standard metric result[13]  ⍝   tideres         metric result, only for systems speified in keepresults and only within trmask--all else are nodata[14]  ⍝   tiderestrict.txt table of values for each crossing. NOTE: There will be multiple identical rows for some points[15]  ⍝RUN AT THE SAME TIME AS TRB_DSL![16]  ⍝B. Compton, 6-13 Sep 2016, from TRB_DSL and TR[17]  ⍝23 Sep 2016: exclude not just open water but anything wetter; only give results for systems that will include them in model[18]  ⍝6 Oct 2016: 2 results, 1 for metric with 0s for unvisited, the other for stand-alone distribution with MV for unvisited & excluded systems[19]  ⍝7 Oct 2016: get it right [Gale Road bridge is closed by MassDOT; Bob installs new pressure tank and plumbing][20]  ⍝12 Oct 2016: work with subroutines that bail on edges so we don't get partial watersheds in results[21]  [22]  [23]  [24]   READPARS ME[25]   buffer←4⊃A[26]   M←0 1 1 TABLE pathT PATH targets               ⍝Read TR watershed table[27]   M←(M[;1]∊(⊃⊃S)+¯1+⍳2⊃⊃S)⌿M                     ⍝Items we're doing[28]   M←0 1↓M                                        ⍝Drop watershed # - we don't care about it[29]  [30]   transparent←1[31]   I←0[32]  L1:→((1↑⍴M)<I←I+1)/0                            ⍝For each watershed,[33]   BREAKCHECK                                     ⍝   Do a single watershed[34]   W←M[I;][35]   W[5 6 7 8]←MER2CELLS W[5 6 7 8]                ⍝Convert MER to cells[36]   W[3 4]←buffer+1+(FINDCELL W[3 4])-W[5 6]       ⍝   Watershed outflow in terms of grid[37]   block←¯1,W[5 6 7 8],buffer                     ⍝   set block to our current window[38]  [39]   X←READ 1⊃1⊃A                                   ⍝Tides[40]   lc←READ 2⊃1⊃A                                  ⍝Landcover[41]   d8flow←READ 3⊃1⊃A                              ⍝D8 flow direction[42]   d8accum←READ 4⊃1⊃A                             ⍝D8 flow accumulation[43]   [44]   d8flow←d8flow×~lc∊LOOK 'Freshwater tidal riverine'  ⍝Stop when we get to freshwater tidal[45]   d8flow[1,1↑⍴d8flow;]←d8flow[;1,1↓⍴d8flow]←0    ⍝Don't allow running to edges[46]   cross←lc=LOOK 'Culvert/bridge'                 ⍝Crossing cells[47]   O←~EXPAND lc∊⊃,/LOOK¨FRDBL¨↓','MATRIFY excluded⍝Excluded types from denominator (open water and wetter stuff)[48]   sm←O^lc∊⊃,/LOOK¨FRDBL¨↓','MATRIFY saltmarsh    ⍝Salt marsh cells[49]   psm←O^(X≥0.5)   ⍝^~lc∊'Open water'             ⍝Potential salt marsh cells (predicted by tides variable), but not in open water[50]   tr←(⍴X)⍴0                                      ⍝For values at restrictions[51]   result←(⍴X)⍴MV                                 ⍝Result grid[52]  [53]  [54]   ⎕←'Watershed ',(⍕W[1]),'...' ⋄ FLUSH[55]   ⍝TRr expects globals: result, trs, d8flow, dams[56]   Q←TRr1 W[3 4]                                  ⍝      Follow watershed up and back down, summing salt marsh and potential salt marsh cells[57]  ⍎(Q≡⍳0)/'÷0'                                    ⍝      If we hit an edge within a watershed, this would be an error...it shouldn't happen[58]   0 TRr2 W[3 4]                                  ⍝      Follow watershed up taking worst restriction below each cell[59]  [60]  [61]   Q←(,tr≠0)⌿(,⍉(⌽⍴tr)⍴(⍳1↑⍴tr)),(,(⍴tr)⍴⍳1↓⍴tr),[1.5],tr[62]   Q[;1 2]←↑1 FINDPOINT¨↓Q[;1 2][63]   Q LOCKWRITE pathR PATH 'tiderestrict.txt'     ⍝      Write tidal restriction points[64]  [65]  ⍝⍝⍝⍝⍝FOR TESTING[66]   Q←Q,((1↑⍴Q),2)⍴¯1,M[I;1][67]   Q LOCKWRITE pathR PATH 'ZZINFO.txt'     ⍝      Write tidal restriction points[68]  ⍝⍝⍝⍝⍝[69]  [70]   result←6 ROUND MVREP result ((X=MV)∨X<0.1)     ⍝   don't write results where tides are missing or tides < 0.1[71]   result WRITE pathR PATH 1⊃3⊃A                  ⍝   Write results transparently[72]   result←MVREP result ((MV=READ 5⊃1⊃A)∨(~lc∊⊃,/LOOK¨FRDBL¨↓','MATRIFY keepresults))   ⍝   write separate version for a reasonable stand-alone metric[73]   result WRITEI pathR PATH 2⊃3⊃A[74]   →L1[75]  [76]  [77]  [78]  what:CAPS coastal[79]  type:table[80]  info:((pathU PATH 'tides') 'dslland' 'flow' 'd8accum' 'trmask') ('') ('TR' 'tideres') (2)       ⍝Metric-specific source grids, settings table, result grid, buffer size, and include grid[81]  check:pathT CHECKFILE targets[82]  check:CHECKVAR 'saltmarsh cutoff excluded keepresults'[83]  init:(GRIDNAME pathS PATH 'zeros') GRIDCOPY pathR PATH 'tr'          ⍝Copy grid of zeros to result so we don't have MVs in unvisited marshes[84]  init:head←1↓⎕TCHT MTOV MATRIFY 'x y tiderest' ⋄ (0 0⍴'') TMATOUT pathR PATH 'tiderestrict.txt'[85]  init:head←1↓⎕TCHT MTOV MATRIFY 'x y tiderest source row col' ⋄ (0 0⍴'') TMATOUT pathR PATH 'ZZINFO.txt'   ⍝⍝⍝⍝⍝ FOR TESTING    ∇