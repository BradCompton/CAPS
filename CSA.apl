    ∇ CSA;csbdir;D;F;C;pathA;T;dict;dict_;L;I;Q;P;J;N;X;head;pars;comment;refgrid;logfile;K;U;cseproject;V;changed;landcover;A;whitelist;csasleep;M[1]   ⍝CAPS Scenario Agent[2]   ⍝Watches the FTP site for new CSB scenarios, and launches CSE, the CAPS Scenario Engine on Anthill[3]   ⍝Runs forever until run\stopCSA is created[4]   ⍝B. Compton, 21-22 Jun 2012 (the first full day of summer...and it's 90 degrees and climbing)[5]   ⍝23 Apr 2013: do reporting here instead of from CSE so I don't have to install MiKTeX on all cluster machines[6]   ⍝24 Apr 2013: check whitelist for authorization (authorized may also be set to 1 manually)[7]   ⍝25 Apr 2013: always use CSB parameters[8]   ⍝6 May 2013: unpack town numbers; Bob's new nested project scheme[9]   ⍝25 Jun 2013: unpack mitigation discounts too[10]  ⍝27 Jun 2013: only give messages when there's something new to say[11]  ⍝9 Jul 2013: wait after reading FTP site to allow newly-uploaded files to arrive. Need a better way to do this![12]  [13]  [14]  [15]   ⎕←'----- csedir = ',csedir,' -----' ⋄ FLUSH[16]   SETPATHS[17]   inputspar←'inputs.par'                     ⍝Default paths for these, if not set in parameters.par[18]   resultspar←'results.par'[19]   synonymspar←'synonyms.par'[20]   landcoverpar←'landcover.par'[21]  [22]   pars←NREAD (pathI←csedir PATH 'model\') PATH 'parameters.par'  ⍝All parameters come from CSB version[23]   READPARS 'caps'[24]   READPARS ME[25]   refgrid←1 GRIDNAME 'reference'[26]   CONFIG                     ⍝Initialize Anthill stuff[27]   landcover←¯1 'no dam' OVER ¯1 TABLE landcoverpar        ⍝Read landcover; add a special value for 'no dam'[28]   M←''[29]  [30]   (csedir PATH 'CSA.log') LOG 'CSA starting...'[31]   LOG 'Create ',(csedir PATH 'stopCSA'),' to stop the CAPS Scenario Agent (using Ctrl-break can hang lock!)'[32]   ⎕←''[33]   ⎕←'-> Don''t forget to launch the grid server(s)!'[34]   ⎕←''[35]  [36]   NDROP csedir PATH 'stopCSA'[37]  [38]  L1:GETDICT[39]   L←¯1↓¨0 SUBDIRS csbdir                                 ⍝Get subdirectories[40]   T←⎕DL 10                                               ⍝Wait 10 seconds to allow all files to arrive via FTP[41]   I←0[42]  L2:→((⍴L)<I←I+1)/L6                                     ⍝For each user subdirectory,[43]   Q←⎕LIB csbdir,I⊃L[44]   P←¯1↓¨FRDBL¨↓((RJUST Q)[;(⍴Q)[2]]='\')⌿Q               ⍝Project folders[45]   →((TOLOWER¨L[I])∊TOLOWER¨dict[;dict_ COL 'user'])/L3   ⍝   If new user,[46]   LOG '*** New user: ',⊃L[I][47]   M←''[48]   →L4                                                    ⍝   Else, existing user[49]  L3:T←(dict[;dict_ COL 'user']) FINDI I⊃L                ⍝      Existing projects of this user[50]   P←(~P∊dict[T;dict_ COL 'project'])/P                   ⍝      New projects[51]  [52]  L4:J←0[53]  L5:→((⍴P)<J←J+1)/L2                                     ⍝      For each new project,[54]   X←VTOM ⎕TCNL,NREAD csbdir,(I⊃L),'\',(J⊃P),'\',(J⊃P),'.cpj'  ⍝         read project file & add project[55]   N←1↑⍴',' MATRIFY X PULL 'SCENARIOS'[56]   dict←dict⍪L[I],P[J],(⊂'pending'),(⊂X PULL 'SENDER_EMAIL'),(⊂X PULL 'DATE_SENT'),(⊂NOW),0 0,(⊂X PULL 'SCENARIOS'),N,(⊂⍳0),(⊂PULLMSG X),(⊂''),0[57]   LOG 'Adding new project ',((I⊃L),'/',(J⊃P)),' to dictionary (waiting for authorization)'[58]   M←''[59]   →L5[60]  [61]  L6:dict[;dict_ COL 'authorized']←dict[;dict_ COL 'authorized']∨(TOLOWER dict[;dict_ COL 'email'])∊TOLOWER¨0 MATIN whitelist ⍝Authorize projects[62]  [63]   I←0[64]  L7:→((1↑⍴dict)<I←I+1)/L8                                ⍝For each project,[65]   →(~dict[I;dict_ COL 'status authorized']≡'pending' 1)/L7 ⍝   if pending and authorized,[66]   dict[I;dict_ COL 'status']←⊂'assigned'[67]   LOG 'Assigning authorized project ',(Q←1↓⊃,/'/',¨dict[I;dict_ COL 'user project']),' to CSE on Anthill'[68]   M←''[69]   comment←'CSE: ',Q[70]   CSELAUNCH Q I                                          ⍝      launch it[71]   →L7[72]  [73]  L8:→(0=Q←+/dict[;dict_ COL 'status authorized'] FIND 'pending' 0)/L12[74]   T←⎕TCNL,'*** CSA is waiting for authorization for ',(⍕Q),' project',((Q≠1)/'s'),'.',⎕TCNL[75]   →(T≡M)/L12                                             ⍝If this message is new,[76]   LOG M←T                                                ⍝   display it[77]  L12:PUTDICT[78]   K←dict[;dict_ COL 'status'] FINDI 'reporting'          ⍝Get list of projects ready for reporting[79]   →(IFEXISTS csedir PATH 'stopCSA')/L11                  ⍝Stop if stopCSA exists[80]  [81]   I←0[82]  L9:→((⍴K)<I←I+1)/L10                                    ⍝For each project that's ready for reporting,[83]   ⎕←'Writing report for project ',(1↓⊃,/'/',¨dict[K[I];dict_ COL 'user project']),'...' ⋄ FLUSH[84]   U←dict[K[I];dict_ COL 'user project']                  ⍝User/project[85]   cseproject←csedir,'projects\',(('. ._' TEXTREPL 1⊃U),'\'),('. ._' TEXTREPL 2⊃U),'\'[86]   V←STRIP¨FRDBL¨↓',' MATRIFY ⊃dict[K[I];dict_ COL 'scenarios']            ⍝List of scenarios[87]   changed←(1,⎕TCHT) MATIN cseproject,'post\changed.txt'[88]   changed[;1]←⍎¨changed[;1]                              ⍝unpack town names[89]   changed[;10]←,¨⍎¨(⊂'.().⍳0') TEXTREPL¨changed[;10]     ⍝and mitigation discounts[90]  [91]  ⍝---Put together report & zip it up[92]   (cseproject,'post\') CSE_REPORT (STRIP¨V) (,dict[K[I];dict_ COL 'project user email message sent metrics'])[93]   T←'finished' 'finished' NOW UPDATE_STATUS U[94]   LOG 'CSA is finished with ',1↓⊃,/'/',¨U[95]   M←''[96]  [97]   →L9[98]  [99]  L10:→(IFEXISTS csedir PATH 'stopCSA')/L11               ⍝Stop if stopCSA exists[100]  T←⎕DL csasleep                                         ⍝Sleep a while[101]  →L1                                                    ⍝And do it all again until stopped[102] [103] L11:LOG 'CSA shutting down'    ∇