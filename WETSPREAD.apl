    ∇ Z←WETSPREAD A;Q;err;S;I;J;R;F;L1;K[1]   ⍝Do resistant kernel through streamflow grid given parameters ⍵ and running Z ⍺[2]   ⍝   influence ← WETSPREAD spread-value focal-row focal-col resistance-matrix streamflow[3]   ⍝where:[4]   ⍝   influence = resulting influence matrix[5]   ⍝   spread-value = initial spread value, in cells[6]   ⍝   focal-row, focal-col = starting cell[7]   ⍝   resistance-matrix = matrix of resistance values[8]   ⍝   streamflow = D8 flow grid for stream centerlines only[9]   ⍝APL version: B. Compton, 12 Sep 2011[10]  ⍝22 Sep 2011: globalize all variables for WETSPREAD2 to speed things up[11]  ⍝Integrated with C version (E. Ene, 22 Apr 2012), 27 Apr-1 May 2012[12]  ⍝19 Jun 2013: oops! Remove code that compensated for Edi's original use of ⎕IO=0[13]  [14]  [15]  [16]   →(aplc=1)/L2                   ⍝If C version,[17]   →(3=⎕NC'WETSPREADc')/L1        ⍝   If not loaded,[18]   Q←⎕EX 'WETSPREADc'[19]   ⎕ERROR REPORTC 'DLL I4←CAPS_LIB.wetspread(F8,I4,I4,I4,I4,*F8,*I4,*F8←)' ⎕NA 'WETSPREADc'[20]  ⍝ ⎕←'CAPS_LIB.wetspread loaded.'[21]  [22]  L1:A←A[⍳3],(⍴⊃A[4]),A[4 5],⊂(⍴4⊃A)⍴0[23]   err Z ← WETSPREADc A[24]   ⎕ERROR REPORTC 1 err[1+err<0][25]   →0[26]  [27]  [28]  L2:S I J R F ← A                ⍝Else, APL version[29]   Z←(⍴R)⍴0                       ⍝Build Z and set Z for starting cell[30]   Z[I;J]←S[31]   WETSPREAD2 I,J                 ⍝Call recursive subroutine for cell I,J (all other variables are global)    ∇