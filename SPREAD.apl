    ∇ Z←SPREAD A;Q;err[1]   ⍝Do resistant kernel[2]   ⍝   influence ← SPREAD spread-value focal-row focal-col resistance-matrix long-diag[3]   ⍝where:[4]   ⍝   influence = resulting influence matrix[5]   ⍝   spread-value = initial spread value, in cells[6]   ⍝   focal-row, focal-col = starting cell[7]   ⍝   resistance-matrix = matrix of resistance values[8]   ⍝   long-diag = 1 if using 1.4 for diagonals, or 0 if using 1.0 (default = use 1.4)[9]   ⍝SPREAD is C++ version of my FASTHULL (in kernel workspace).  It is ~800 times faster; results[10]  ⍝are within 1E¯5 of results from FASTHULL.  1.4 is used for diagonals.  Any negative resistance[11]  ⍝value is treated as a NODATA cell, acting as an absolute barrier.[12]  ⍝B. Compton / E. Ene 28 Feb 2006[13]  ⍝20 Jun 2006: try multiple source directories & allow both c:\winnt and c:\windows[14]  ⍝Runs APL version if aplc=1, or C version if aplc=2[15]  ⍝15 Jan 2009: repackaged with aplc as for other C functions.  Now lives in caps_lib.dll.[16]  ⍝19 Feb 2009: shorten parameter list[17]  ⍝23 Sep 2011: new version with option for diagonals (26 Sep 2011: probably won't use this after all)[18]  [19]  [20]   →(aplc=1)/L2                    ⍝If C version,[21]   →(3=⎕NC'SPREADc')/L1            ⍝   If not loaded,[22]   Q←⎕EX 'SPREADc'[23]   ⎕ERROR REPORTC 'DLL I4←CAPS_LIB.spread(F8,I4,I4,I4,I4,*F8←,I4)' ⎕NA 'SPREADc'[24]   ⍝⎕←'CAPS_LIB.spread loaded.'[25]  [26]  L1:A←A[⍳3],(⍴⊃A[4]),A[4],(5↑A,1)[5][27]   err Z ← SPREADc A[28]   ⎕ERROR REPORTC 1 err[1+err<0][29]   →0[30]  [31]  L2:÷0                       ⍝Else, APL version[32]   ⍝Call FASTHULL here.  Need to figure out parameters.  Not really necessary at this point.    ∇