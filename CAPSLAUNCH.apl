    ∇ CAPSLAUNCH X;A;B;T;P;D;Q;C;I;Y;R[1]   ⍝Launch an Antill run of CAPS for commands, reps, and metric name ⍵[2]   ⍝Globals:[3]   ⍝   path            Base path for the project[4]   ⍝   project         Project name[5]   ⍝   priority        Cluster priority[6]   ⍝   maxthreads      Maximum number of threads for project[7]   ⍝   owner           Project owner[8]   ⍝   comment         Project comment[9]   ⍝   timelimit       Time limit (seconds)[10]  ⍝   capsworkspace   location of CAPS workspace[11]  ⍝B. Compton, 23 May 2011 (from HABLAUNCH)[12]  ⍝27 May 2011: New parameters: basepath[13]  ⍝12 Apr 2012: add onerror[14]  ⍝19 Jul 2012: allow passing in workspace[15]  ⍝18 Sep 2012: use variable for CAPS workspace location[16]  ⍝28 Sep 2012: all no metrics[17]  ⍝11 Mar 2013: add maxthreads for projects (haven't done it for tasks yet...)[18]  ⍝23 Aug 2013: call TILEMAP with dependencies[19]  ⍝4 Nov 2013: don't ping grid server any more - there may be many[20]  ⍝2 Jan 2014: set taskcost[21]  ⍝5 Sep 2014: split tasks that have more than splitsubtasks subtasks if splittasks is true[22]  ⍝15 Sep 2014: fix a bug that caused non-block metrics to be dropped when splittasks = yes[23]  ⍝28 Oct 2014: split tasks was screwed up - now fixed[24]  ⍝12 Nov 2014: was splitting tasks for non-tile metrics[25]  ⍝8 Feb 2016: add host[26]  ⍝25 May 2016: if scrambling subtasks, scramble split tasks too[27]  ⍝20-22 Jun 2016: add splittasks to table metrics (full moon solstice)[28]  ⍝28 Jul 2017: fix a couple of bugs with subtask splitting + post = yes, and subtask scrambling with splitting (Trumpcare is dead forever?)[29]  [30]  [31]  [32]   ⍎(0=⎕NC'project')/'project←⍳0'[33]   ⍎(0=⎕NC'priority')/'priority←0'            ⍝Use Anthill defaults for these if not defined[34]   ⍎(0=⎕NC'maxthreads')/'maxthreads←0'[35]   ⍎(0=⎕NC'owner')/'owner←0'[36]   ⍎(0=⎕NC'comment')/'comment←0'[37]   ⍎(0=⎕NC'timelimit')/'timelimit←0'[38]   ⍎(0=⎕NC'onerror')/'onerror←''kill'''[39]   ⍎(0=⎕NC'workspace')/'workspace←''',capsworkspace,''''[40]   ⍎(0=⎕NC'host')/'host←'''''[41]  [42]  [43]   GETLAUNCHPROJECT                           ⍝Copy in Anthill workspace[44]  [45]   ⍎(0∊⍴metrics)/'metrics←1 1⍴⊂''no metrics called'''[46]   P←'CAPS-',((1+3<1↑⍴metrics)⊃(1↓⊃,/' ',¨metrics[;1]) (⍕1↑⍴metrics),' metrics')    ⍝Default project name[47]   A←⊂(1+0∊⍴project) ⊃ project P              ⍝Project name[48]   A←A,priority                               ⍝Priority[49]   A←A,⊂path                                  ⍝Base path[50]   A←A,⊂owner                                 ⍝Owner[51]   A←A,⊂pathP                                 ⍝Project path[52]   A←A,⊂pathA                                 ⍝Anthill path[53]   A←A,⊂comment                               ⍝Project comment[54]   A←A,⊂onerror                               ⍝Onerror action[55]   A←A,⊂maxthreads                            ⍝Maximum number of threads in project[56]   A←A,⊂host                                  ⍝Project host[57]  [58]  ⍝ X←X⍪('wait' 'CAPSEND'),2 2⍴⊂''             ⍝Append command to write end of run to log file[59]  [60]  ⍝If calling TILEMAP, create new tasks and set dependency / split subtasks[61]   Q←(⍳2)+.×('BLOCKCALL' 'TABLECALL')∘.≡9↑¨X[;1]   ⍝tasks using (1) BLOCKCALL or (2) TABLECALL[62]   :if splittasks                             ⍝If splitting tasks, we'll do TILEMAPs now,[63]      :if 1∊Q                                 ⍝   If any are BLOCKCALL,[64]         ⎕←'→→→ Calling TILEMAP because splittasks = yes.  This may take quite a while...' ⋄ FLUSH[65]      :end[66]      Y←(⍴Q)⍴1[67]      I←0[68]  L1: →((⍴Q)<I←I+1)/L2                        ⍝   For each task,[69]      :if Q[I]=1                              ⍝      If tile metric,[70]         ⎕←'   → Building tile map for ',⊃X[I;3] ⋄ FLUSH[71]         ⍎'R←',(∨\T ⎕SS 'BLOCKREPS')/T←⊃X[I;2]⍝         call TILEMAP[72]         Y[I]←⌈(1↑⍴R)÷splitsubtasks           ⍝         number of subtasks to split into[73]      :elseif Q[I]=2                          ⍝      else, if table metric,[74]         R←1↑⍴1 PARSESUBTASK ⊃X[I;2][75]         Y[I]←⌈R÷splitsubtasks                ⍝         number of subtasks to split into[76]      :end    [77]      →L1[78]  L2: X←Y⌿X                                   ⍝      split tasks[79]      Q←Y/Q[80]      X[;2]←X[;2],¨(Q≠0)\(Q≠0)/' ',¨DEB¨↓⍕splitsubtasks×(⊃,/¯1+⍳¨Y),[1.5]1  ⍝      add start and n subtasks to each[81]      :if scramblesubtasks                    ⍝      If we're scrambling subtasks,[82]         X←X[⊃,/(0,¯1↓+\Y)+¨Y?¨Y;]            ⍝         scramble within each group of split tasks too[83]      :end[84]      D←(1↑⍴X)⍴0                              ⍝   no dependencies[85]      C←ROUND Y/÷Y                            ⍝   task costs sum to 1 for each task[86]   :else                                      ⍝Else, set tasks to do TILEMAPs[87]      X←((((⊂'SINK '),¨(Q←Q=1)/(X[;2]⍳¨':')↓¨X[;2]),[1.5]⊂''),⊂'Build tile map')⍪X[88]      C←~(1↑⍴X)↑((+/Q)⍴1)                     ⍝   Set taskcost to exclude TILEMAP calls from project progress[89]      D←((+/Q)⍴0),Q\⍳+/Q                      ⍝   Set dependencies[90]      D[(D=0)/⍳⍴D]←⊂''[91]   :end[92]  [93]   B←X[;1 2]                                  ⍝Command and reps[94]   B←B,⊂'left'                                ⍝Subtask argument[95]   B←B,⊂'apl'                                 ⍝System[96]   B←B,⊂workspace                             ⍝Workspace (this one)[97]   B←B,timelimit                              ⍝Timelimit[98]   B←B,X[;3]                                  ⍝Comment is metric name[99]   B←B,D                                      ⍝Dependency[100]  B←B,0                                      ⍝Max threads[101]  B←B,C                                      ⍝Task cost, from TILEMAP calls above[102] [103] [104]  A LAUNCHPROJECT B                          ⍝Launch the project[105]  ⎕←''    ∇