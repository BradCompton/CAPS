    ∇ A FINDBANKS S;X;R;B;C;buffer;crossings;I;head;J;Z;K;H;D;V;Q;U;O;N;M;G[1]   ⍝Modify crossings table to move crossings and terrestrial crossing score to stream banks[2]   ⍝Preprocesses data for CONNECT → SETTINGS → CROSSINGSMOD[3]   ⍝Runs as a CAPS block metric.[4]   ⍝Parameters:[5]   ⍝   buffer              should extend as far as longest centerline → bridge end[6]   ⍝   crossings           name of crossing table (crossings.txt)[7]   ⍝Source:[8]   ⍝   crossings.txt       table of crossings and crossing codes[9]   ⍝   streams             stream centerlines & off-centerlines[10]  ⍝   roads               road cells[11]  ⍝   trains              railroad cells[12]  ⍝Results:[13]  ⍝   bankcrossings.txt   crossings & terrestrial scores, with points moved to banks[14]  ⍝Optimal block size is 500 cells.  Massachusetts takes about 10 min on Chelydra (1 process).[15]  ⍝B. Compton, 27-28 Oct 2010[16]  ⍝28 Jan 2011: save banks as well as original crossing; allow flexibility in crossings table by using column names[17]  ⍝5 Dec 2011: keep terrestrialLCI for linkages/roads-uncertainty[18]  ⍝3 Feb 2012: if terrestrialLCI or surveyed are missing, don't worry; 1 Apr 2012: get the rest of this[19]  ⍝22 Nov 2013: don't use LOAD--it interacts among runs![20]  ⍝31 Dec 2013: use READVEC[21]  ⍝10 Mar 2014: give up when it gets too whacky[22]  [23]  [24]  [25]   READPARS ME[26]   buffer←B←4⊃A[27]   X←(READ 1⊃1⊃A)∊1 2                             ⍝Get streams (don't care about centerline/off-centerline)[28]   →((0∊⍴X)∨^/X=MV)/0                             ⍝Bail if no streams in block[29]   G←READVEC crossings                            ⍝Read crossings table[30]   I←(↓2⊃G) COL 'id' 'x-coord' 'y-coord' 'terrestrial' 'terrestrialLCI' 'surveyed'[31]   I←(¯2×∨/0=I[5 6])↓I                            ⍝If terrestrialLCI or surveyed are missing, drop them both[32]   C←((1↑⍴C),6)↑C←(1⊃G)[;I][33]   C[;2 3]←↑1 FINDCELL¨↓C[;2 3]                   ⍝Crossing locations in terms of cells[34]   C←(^/(C[;2 3]>buffer)^C[;2 3]≤((1↑⍴C),2)⍴(⍴X)-buffer)⌿C    ⍝Clip to extent of current block, excluding buffer[35]   →(0∊⍴C)/0                                      ⍝Bail out if no crossings[36]   R←READ 2⊃1⊃A                                   ⍝and roads,[37]   R←(R≠MV)∨MV≠READ 3⊃1⊃A                         ⍝and merge with railroads[38]   U←(~X)^BUFFER X                                ⍝Cells orthogonally adjacent to streams[39]  [40]   C←C[⍋C[;2 3];]                                 ⍝Sort them[41]   Q←∨/C[;2 3]≠¯1 0↓0⍪C[;2 3]                     ⍝Find multiple crossings in the same cell[42]   C←(Q⌿C[;⍳3]),(Q pMIN C[;4]),(Q pMIN C[;5]),Q⌿C[;,6]   ⍝Take worst-case of multiple crossings[43]   O←4 2⍴¯1 0 0 ¯1 0 1 1 0                        ⍝Orthogonal indices[44]   Z←0 6⍴0[45]  [46]   I←0[47]  L1:→((1↑⍴C)<I←I+1)/L9                           ⍝For each crossing,[48]   BREAKCHECK[49]   M←0[50]   S←C[,I;2 3]                                    ⍝   Crossing location ("source")[51]   D←((⍴X)⍴0) SCATR S 1[52]   V←0 2⍴0[53]  L2:Q←0 2⍴0[54]   J←0[55]  L3:→((1↑⍴S)<J←J+1)/L4                           ⍝   For each source,[56]   K←(4 2⍴S[J;])+O                                ⍝      indices of 4 othogonal cells[57]   →(0∊⍴K←((^/K≠0)^^/K≠1+1↑⍴D)⌿K)/L8              ⍝      don't run off edge--give up if nothing good found[58]   K←((~D SCATI K)^R SCATI K)⌿K                   ⍝      ...on top of road cells that weren't already visited[59]   D←D SCATR K 1                                  ⍝      now they've been visited[60]   V←V⍪(~B←X SCATI K)⌿K                           ⍝      targets are road cells over non-lotic[61]   Q←Q⍪B⌿K                                        ⍝      remove these from source[62]   →L3[63]  L4:→(~0∊⍴S←Q)/L2                                ⍝   Keep trying with new sources until we run out[64]  [65]   J←0[66]  L6:→((1↑⍴V)<J←J+1)/L8                           ⍝   For each target,[67]   K←(4 2⍴V[J;])+O[68]   →(0∊⍴K←((^/K≠0)^^/K≠1+1↑⍴D)⌿K)/L8              ⍝      don't run off edge--give up if nothing good found[69]   Q←V[J;]⍪((U SCATI K)^R SCATI K)⌿K              ⍝      Orthogonally adjacent road cells adjacent to streams[70]   →(2<1↑⍴Q)/L6                                   ⍝      If more than two, it's a road along stream and we'll skip it[71]   N←↑,(↓Q)∘.+↓O                                  ⍝      Orthogonally adjacent cells to our targets[72]   N←(((↓N)⍳↓N)=⍳1↑⍴N)⌿N                          ⍝      Unique cells[73]   →(0∊⍴N←((^/N≠0)^^/N≠1+1↑⍴D)⌿N)/L8              ⍝      don't run off edge--give up if nothing good found[74]   →(2<+/(R SCATI N)^U SCATI N)/L6                ⍝      If more than two (stricter check than above), it's a road along stream[75]   →(~1∊(R SCATI N)^(~U SCATI N)^~X SCATI N)/L6   ⍝      Must be at least 1 adjacent road cell not adjacent to stream[76]   M←1[77]   Z←Z⍪C[I;]⍪C[I;1],Q,(1↑⍴Q)⌿C[,I;4 5 6]          ⍝      save results: original crossing + banks[78]   →L6[79]  [80]  L8:→M/L1                                        ⍝   If didn't end up with any crossings,[81]   Z←Z⍪C[I;]                                      ⍝      Fall back to original crossing point[82]   →L1[83]  [84]  L9:Z←Z[⍋Z[;2 3];]                               ⍝Sort results[85]   Q←∨/Z[;2 3]≠¯1 0↓0⍪Z[;2 3]                     ⍝Find multiple crossings in the same cell[86]   Z←(Q⌿Z[;⍳3]),(Q pMIN Z[;4]),(Q pMIN Z[;5]),Q⌿Z[;,6]   ⍝Take worst-case of multiple crossings[87]  [88]   Z[;2 3]←↑1 FINDPOINT¨↓Z[;2 3]                  ⍝Results are in terms of points[89]   Z LOCKWRITE pathT PATH 'bankcrossings.txt'     ⍝Write results to table[90]   →0[91]  [92]  [93]  what:data prep[94]  type:standard[95]  init:head←1↓⎕TCHT MTOV MATRIFY 'id x-coord y-coord terrestrial terrestrialLCI surveyed' ⋄ (0 0⍴'') TMATOUT pathT PATH 'bankcrossings.txt'  ⍝Write result table header[96]  info:((⊂pathS),¨'streams' 'roads' 'trains') ('') ('') (⌈buffer÷cellsize)       ⍝Source grid, settings table, result grid, and buffer size[97]  check:CHECKVAR 'buffer crossings'[98]  check:pathT CHECKFILE crossings    ∇