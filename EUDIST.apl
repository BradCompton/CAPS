    ∇ Z←A EUDIST X;J;I;N;Q;nomv;int;err[1]   ⍝Return Euclidean distance between vector ⍺ (length v) and each ⍵ in v×n×m array[2]   ⍝Globals:[3]   ⍝   aplc - if 1, APL version; if 2, C version[4]   ⍝   int -  if 1, ⍺ and ⍵ are expected to be integers[5]   ⍝   nomv - if 1, doesn't check for missing values (always true in APL version)[6]   ⍝Runs APL version if aplc=1, or C version if aplc=2[7]   ⍝APL version: 6 Dec 2007; faster version, 7 Jan 2008[8]   ⍝B. Compton/E. Ene, 19 Dec 2008[9]   [10]  [11]   int←nomv←0   ⍝Fix these at zero for now[12]  [13]   →(aplc=1)/L2                   ⍝If C version,[14]   →(^/3=⎕NC'EUDISTc EUDISTIc')/L1⍝   If not loaded,[15]   Q←⎕EX 'EUDISTc EUDISTIc'[16]   ⎕ERROR REPORTC 'DLL I4←CAPS_LIB.eudist_dbl(I4,I4,I4,F8,*F8,*F8,*F8←,I4)' ⎕NA 'EUDISTc'[17]   ⎕ERROR REPORTC 'DLL I4←CAPS_LIB.eudist_int(I4,I4,I4,I4,*I4,*I4,*F8←,I4)' ⎕NA 'EUDISTIc'[18]  ⍝⎕←'CAPS_LIB.eudist_dbl and eudist_int loaded.'[19]  [20]  L1:⎕ERROR(3≠⍴⍴X)/'ERROR in EUDIST: target must have three dimensions'[21]   A←,A                           ⍝focal must be a vector[22]   N I J ← ⍴X[23]   Z←(1↓⍴X)⍴0[24]   →(int)/L3[25]   err Z←EUDISTc N I J MV A X Z (~nomv)[26]   →L4[27]  L3:err Z←EUDISTIc N I J MV A X Z (~nomv)[28]  L4:⎕ERROR REPORTC err[29]   →0[30]  [31]  L2:Z←(+⌿(X-⍉(⌽⍴X)⍴A)*2)*.5    ∇