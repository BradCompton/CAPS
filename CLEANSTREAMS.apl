    ∇ CLEANSTREAMS;Q;B;X;I;C;head;T;L;D[1]   ⍝Clean up clipped streams in streamvectors.txt[2]   ⍝The problem: after clipping cranberry bogs from streams, there are a lot of little dead segments[3]   ⍝left over.  These cause problems.  The solution: follow streams down to 0 or nodata in DEM,[4]   ⍝deleting orphan segments.[5]   ⍝Inputs:[6]   ⍝   source\dem                  DEM[7]   ⍝   source\cliplines.txt        Clipped streamlines, from makestreams.aml[8]   ⍝Results:[9]   ⍝   source\streamlines.txt      New version of streamlines, with bad segments dropped[10]  ⍝   results\dropstreams.txt     Generate file of dropped segments; use dropstreams.aml to[11]  ⍝                               turn into a coverage for assessment[12]  ⍝   source\divergences.txt      points where streams diverge[13]  ⍝B. Compton, 20-23 Jul 2010[14]  [15]  [16]   SETPATHS[17]   GRIDINIT ''[18]   SETWINDOW pathS,'dem'[19]   ⍞←'Reading vector data...' ⋄ FLUSH[20]   X←MATIN pathS,'cliplines.txt'[21]   ⎕←'done' ⋄ FLUSH[22]   X←(~^/X[;1 2]=X[;3 4])⌿X               ⍝Drop "point" lines (there are 50 of them!)[23]   Q←X[⍋X;1 2][24]   D←(^/Q=1⊖Q)⌿Q                          ⍝List of divergences[25]   ⍞←'Found ',(⍕1↑⍴D),' divergences.  We''ll try to muddle past them.  Points written to '[26]   head←'x-coord',⎕TCHT,'y-coord'[27]   D TMATOUT ⎕←pathS,'divergences.txt'[28]   FLUSH[29]   B←~^/X[;1 2]∊X[;3 4]                   ⍝Identify headwaters[30]   C←(⍴B)⍴1                               ⍝1 = not visited yet, 0 = delete, 2 = keep[31]   L←⍳0[32]  L1:→((1↑⍴X)<I←,(B^C=1)⍳1)/L7            ⍝For each headwater,[33]  L2:DOT[34]   →(C[I[''⍴⍴I]]=1)/L3                    ⍝   If this segment has already been done,[35]   C[I]←C[I[''⍴⍴I]]                       ⍝      Set everything upstream to value we've already found[36]   →L6[37]  L3:→((⍴X)=I[⍴I])/L4[38]   →(~X[I[⍴I]+1;1 2]≡X[I[⍴I];3 4])/L4     ⍝   Else, if next segment is in next row,[39]   I←I,1+I[⍴I]                            ⍝      Quick for this common special case[40]   →L2[41]  L4:→(~1∊Q←X[;1 2]^.=X[I[''⍴⍴I];3 4])/L5 ⍝   If still flowing,[42]   I←I,1↑Q/⍳⍴Q                            ⍝      Find next segment[43]   →(~I[''⍴⍴I]∊¯1↓I)/L2                   ⍝      If in infinite loop,[44]   ⎕←⎕TCNL,'Infinite loop!'[45]   C[I]←0[46]   L←L,¯1↑I[47]   →L1[48]  [49]  L5:T←(FINDCELL X[I[''⍴⍴I];3 4])         ⍝   Found terminal stream segment[50]   →(^/T>0)/L51                           ⍝   If stream flows out of landscape[51]   C[I]←2                                 ⍝      it's good[52]   →L1                                    ⍝   else,[53]  L51:C[I]←2×(''⍴READBLOCK (⊂pathS,'dem'),T,1 1)∊0,MV     ⍝      If stream flows ends in DEM∊0,MV, it's good (=2), if not, it's bad (=0)[54]  L6:⎕←⎕TCNL,(⍕+/C≠1),,' of ',(⍕⍴C),' (',(DEB 2⍕100×(+/C≠1)÷⍴C),'%) done' ⋄ FLUSH ⋄ dot←0[55]   →L1[56]  [57]  L7:→(~1∊C)/L8                           ⍝If any segments not reached yet,[58]   B←^/X[;1 2]∊D                          ⍝   mark heads of divergences[59]   ⎕←'Now visiting ',(⍕+/B),' divergences.' ⋄ FLUSH[60]   →(∨/B^C=1)/L1                          ⍝   If any of these left, go try them[61]   ⎕←'Some segments still not done.'[62]   ÷0                                     ⍝   else, complain and stop[63]  [64]  L8:Q←(C=0)⌿X                            ⍝Done. Deleted segments.[65]   (pathR,'dropstreams.txt') GENERATELINES Q      ⍝Write generate file of dropped streams[66]   ⎕←⎕TCNL,⎕TCNL,'Run dropstreams.aml to assess dropped streams.'[67]   ⎕←''[68]   X←(C≠0)⌿X[69]   head←''[70]   ⎕←'Results written to'[71]   X CMATOUT ⎕←pathS,'streamlines.txt'[72]   →(0∊⍴L)/0[73]   ⎕←⎕TCNL,'Infinite loops were found at:'[74]   ⎕←X[L;]    ∇