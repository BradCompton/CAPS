    ∇ Z←CSE_SETUP U;V;P;M;S;H;Q;T;head;B;E;R[1]   ⍝Set up for CAPS Scenario Engine[2]   ⍝Passed globals:[3]   ⍝   csedir              directory for CSE[4]   ⍝   dict, dict          project dictionary[5]   ⍝Results:[6]   ⍝   U                   owner/project[7]   ⍝   V                   scenarios[8]   ⍝   P                   scenario paths[9]   ⍝   M                   metrics table[10]  ⍝   S                   settings table[11]  ⍝   H                   index into dictionary[12]  ⍝Returns globals:[13]  ⍝   cellsize, refgrid, landcover, maskbits - the usual[14]  ⍝   footprint           value to use for mitigation footprint in maskbits[15]  ⍝   landgrids           grids to be treated as landcover (instead of settings)[16]  ⍝   smeans, smeans_     mean settings for each community[17]  ⍝   cseproject          project path[18]  ⍝   p2l                 postland → land translation table[19]  ⍝B. Compton, 23 Apr 2013 (pulled from CSE)[20]  ⍝26 Apr 2013: use WATERSHED/WATERSHEDB in maskbits, not individual metrics[21]  ⍝31 May-1 Jun 2013: create two buffers for additive kernel metrics (connect/aqconnect): full for running and xx_core, for clipping[22]  ⍝14 Jun 2013: read postland2land translation table[23]  ⍝25 Nov 2013: use current Anthill directory so it can be on any drive[24]  [25]  [26]  [27]   landcover←¯1 'no dam' OVER ¯1 TABLE landcoverpar                ⍝Read landcover; add a special value for 'no dam'[28]  [29]   (csedir PATH 'CSE.log') LOG 'CSE starting for user/project ',U,'...'[30]  [31]   Q←1 0↓(0,⎕TCHT) MATIN csedir,'model\cse_metrics.par'           ⍝Read metrics control table[32]   M←((⊂''),1↓Q[1;])⍪(1 0↓Q[;1 2]),(1 2↓Q)≡¨⊂,'X'                 ⍝Metrics table: binary, column 1 is metric, columns arranged in standard order[33]   M←(1,∨/1 2↓M)⌿M                                                ⍝Drop metrics that are never used[34]  [35]   T←GETBUFFER 1↓M[;1]                                            ⍝Get buffer for each metric[36]   M[1↓⍳1↑⍴M;2]←⎕FI¨1↓M[;2][37]   M←M,(⊂'buffer'),T[38]   R←(B←M[;1]∊'connect' 'aqconnect' 'conduct')⌿M                  ⍝Connect, etc. have both doubled buffer for running, and single buffer for clipping[39]   M←M,(⊂'run'),(⍴T)⍴1[40]   M[1↓⍳1↑⍴M;2]←(⊂'')⍴¨1↓M[;2][41]   M←M⍪(R[;1],¨⊂'_core'),((⊂'')⍴¨1↓¨R[;2]),(0 2↓0 ¯1↓R),(2×R[;1↓⍴R]),0[42]  [43]   S←1 0↓(0,⎕TCHT) MATIN csedir,'model\cse_settings.par'          ⍝Read settings control table[44]   S[1;]←S[1;⌈\(~S[1;]≡¨⊂'')×⍳1↓⍴S]                               ⍝repeat blank headers[45]   ⍝S←(~^/0 1↓Q≡¨⊂'')⌿S                                           ⍝Drop settings variables that are never changed[46]   S[1 2;1]←⊂''                                                   ⍝Settings table: 1st 2 row are headers (1 = scenario type, 2 = subtype); col 1 is settings variables[47]   landgrids←'land' 'lands' 'postland' 'dams' 'mixwater' 'pondids' 'include' ⍝Grids that are treated as landcover grids (as opposed to settings grids)[48]   S←S,'' '',Q PATH¨GRIDNAME¨(Q←pathN pathG[T←1+S[2↓⍳1↑⍴S;1]∊landgrids]),¨2↓S[;1]  ⍝2nd to last column is source grid (full path & name)[49]   S←S,'' '','settings\' 'grids\'[T]                              ⍝Last colum is path to result grid[50]  [51]   smeans smeans_ ← GETTABLE csedir,'model\settingsmeans.txt'     ⍝Read settingsmeans.txt, created by SETTINGSMEANS[52]   smeans[;1]←(LOOKUP 0,smeans[;,1])[;1]                          ⍝Convert communities to numeric class[53]  [54]   H←'preparing' UPDATE_STATUS U←FRDBL¨↓'/' MATRIFY U             ⍝Get CSB dictionary, find project, and update it[55]   LOG 'Project ',(1⊃U),'/',(2⊃U),' has ',(⍕dict[H;dict_ COL 'nscenarios']),' scenario',(1≠dict[H;dict_ COL 'nscenarios'])/'s'[56]   V←FRDBL¨↓',' MATRIFY ⊃dict[H;dict_ COL 'scenarios']            ⍝List of scenarios[57]  [58]   Q←MAKEPATHS T←csedir,'projects\',('. ._' TEXTREPL 1⊃U),'\'     ⍝Create user's path[59]   RMDIR cseproject←T,('. ._' TEXTREPL 2⊃U),'\'[60]   Q←MAKEPATHS cseproject                                         ⍝Create project path[61]   Q←MAKEPATHS cseproject,'post\'                                 ⍝and post path[62]   P←(⊂cseproject),¨((⊂'. ._') TEXTREPL¨STRIP¨V),¨'\'             ⍝Scenario paths[63]  [64]   Q←MAKEPATHS (,P∘.,FRDBL¨↓MATRIFY 'grids settings tables model results'),¨'\'       ⍝Make paths for each scenario[65]   T←⊂MATRIFY ('.→.',⎕TCHT) TEXTREPL 'metrics→model\metrics\ mixedsettings→settings\ software→',pathA[66]   T NWRITE¨P PATH¨⊂'paths.par'                                   ⍝Write paths.par for each scenario[67]   (⊂csedir PATH 'model\') COPYDIRSUB¨P,¨⊂'model\'                ⍝Copy parameter files from cse\model\[68]  [69]   T←' '⍪E,⎕TCHT,MIX (⊂pathS),¨↓E←MATRIFY 'streams flow mixwater pondids dem tiderange south zeros' ⍝Point to auxillary grids in source\[70]   T←T OVER E,⎕TCHT,MIX (⊂pathG),¨↓E←MATRIFY 'wresist'            ⍝Point to auxillary grids in grids\[71]   (⊂T) NAPPEND¨P,¨⊂'model\inputs.par'                            ⍝Point back to constant grids in inputs.par[72]  [73]   head←'; maskbits.txt, generated from CSE_metrics.par by CSE, ',NOW[74]   B←(⊂'watershed')≡¨GETTYPE¨(Q←1 0↓M[;1,M[1;] COL 'group'])[;1]  ⍝Watershed metrics we're calling[75]   Q←((~B)⌿Q)⍪'watershed' 'watershedb',[1.5]⌈/B/Q[;2]             ⍝Need watershed & watershedb in maskbits, not individual metric names[76]   Q TMATOUT pathI PATH maskbits,(~'.'∊maskbits)/'.txt'           ⍝Write maskbits.txt[77]  [78]   (⊂pathT) COPYDIRSUB¨P,¨⊂'tables\'                              ⍝And copy tables from base directory (they may get modified later)[79]   3 ⎕CMD 'xcopy ',csedir,'model\community-count.csv "',cseproject,'post\" /y /e'[80]  [81]   Q←(0,⎕TCHT) MATIN pathI PATH 'postland2land.par'               ⍝Read postland → land translation table[82]   p2l←(⊃,/LOOK¨Q[;1]),[1.5]⊃,/LOOK¨Q[;2]                         ⍝and convert it to cover types[83]  [84]  [85]   Z ← U V P M S H    ∇