    ∇ F CHECKGRID G[1]   ⍝Check whether grid ⍵ is properly stored, named, and formatted for use with gridio[2]   ⍝If ⍺[1] (test), performs all tests, including attempting griddescribe and readblock[3]   ⍝If ⍺[2] (pathonly), drops all tests that aren∇t relevant to seeing if the path is a valid path for a new grid[4]   ⍝Original by E. Plunkett, Feb 2016; translated from the R by B. Compton[5]   ⍝B. Compton, 11 Mar 2016[6]   [7]   [8]   [9]    ⍎(0=⎕NC'F')/'F←1 0'        ⍝Default: test = true, pathonly = false[10]   F←2↑F[11]  [12]   G←(-'\'=¯1↑G)↓G←FRDBL G[13]  [14]    x <- gsub("/$", "", x)  # drop trailing "/"[15]    name <- gsub("^.*/", "", x)[16]    pdir <- gsub("/[^/]*$", "", x) # parent dir[17]    [18]    if(!pathonly)[19]      result$'file missing' <- !file.exists(x)[20]    [21]    result$'name too long' <- nchar(name) > 13[22]    [23]    if(!pathonly)[24]      result$'is multitiled' <- ismultitiled(x)[25]    [26]    result$'illegal character in name' <- grepl("[^[:digit:][:alpha:]_+-]", name) # numbers, letters, "-", "_", "+" are allowed[27]    result$'space in path' <- grepl("[[:blank:]]", x)[28]    result$'path too long' <- nchar(x) > 128[29]    result$'path dangerously long' <- nchar(x) > 115[30]  [31]    if(pathonly){[32]      result$'parent directory missing' <- !file.exists(pdir)[33]    [34]    } else {[35]      info.path <- paste0(pdir, "/info")[36]      result$'info dir missing' <- !file.exists(info.path)[37]    [38]      component.files <- paste0(x, "/",   c("dblbnd.adf", "hdr.adf", [39]                                            "sta.adf", "w001001.adf", [40]                                            "w001001x.adf"))[41]      result$'component files missing' <- !all(file.exists(component.files))[42]    } [43]    [44]    [45]    result$problem <- any(unlist(result))[46]    if(!test || result$problem || pathonly)[47]      return(result)[48]    [49]    [50]    # These last two tests rely on gridio and the ESRI's C++ API [51]    # they are only performed if all the prior tests passed as grids that fail the above test[52]    # might cause hard crashes. [53]    [54]    oc <- saveconnections()[55]    on.exit(restoreconnections)[56]    gridinit()[57]    [58]    a <- tryCatch({[59]      d <- griddescribe(x)[60]    }, error = function(e) e )[61]    [62]    if(inherits(a, "error")) {[63]      result$'failed decribe' <- TRUE[64]    } else {[65]      result$'failed describe' <- FALSE  [66]    }[67]    [68]    [69]    result$'grid describe reports missing grid'  <- d$type == "missing"[70]    [71]    result$problem <- NULL[72]    result$problem <- any(unlist(result))[73]    if(result$problem) return(result)[74]    [75]    setwindow(x)[76]    [77]    a <- tryCatch({[78]      b <- readblock(path = x, startrow = 1, startcol = 1, nrow = min(5, d$nrow), ncol = min(5, d$ncol))[79]    }, error = function(e)e)  [80]    if(inherits(a, "error")) {[81]      result$'failed read test' <- TRUE[82]    } else {[83]      result$'failed read test' <- FALSE  [84]    }[85]    [86]    [87]    [88]    result$problem <- NULL  # so that "problem" is last item[89]    result$problem <- any(unlist(result))[90]    [91]    return(result)[92]    [93]  }    ∇