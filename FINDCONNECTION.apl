    ∇ Z←C FINDCONNECTION W;D;E;I;P;Q[1]   ⍝Find the connection (in ⍺, default is global connections) matching window or pane 1⊃⍵ on optional path 2⊃⍵; return multiple connections if 2⊃⍵ is 1[2]   ⍝⍵ is either a window: ncol, nrow, xll, yll, cellsize[3]   ⍝         or a pane: -paneno[4]   ⍝If passing in connections, global header connections_ is still used[5]   ⍝Result is matched connection number or MV if no matches.[6]   ⍝Multiple matches are resolved by checking to see if the drive[7]   ⍝associated with one of the connections matches the path or,[8]   ⍝failing that, by returning the first matching connection.[9]   ⍝B. Compton, 4 and 7 Oct 2013. The government is still shut down.[10]  ⍝14-18 Nov 2014: Add pane argument to look for a particular pane; strip just the drive letter from path; return MV, not 0 if no matches[11]  ⍝3 Feb 2015: allow passing in connection list[12]  ⍝4 Aug 2017: if 2⊃⍵ is 1, return multiple connections per pane (used when called from MOSAICINIT when a run uses mosaics on multiple computers) + wrong if no matching drive[13]  [14]  [15]  [16]   ⍎(0=⎕NC'C')/'C←connections'[17]   ⍎(1≥≡W)/'W←W '''''[18]   W P ← W[19]  [20]   D←E←(1↑⍴C)⍴0                                           ⍝Bit vectors for drive matches and extent matches[21]   :if 0>1↑W                                              ⍝If looking for a pane,[22]      ⎕ERROR (~(|W)∊C[;connections_ COL 'pane'])/'Error: pane ',(⍕|W),' isn''t in connections!'[23]      E←(|W)=C[;connections_ COL 'pane']                  ⍝   Find pane(s)[24]   :else                                                  ⍝Else, looking for a window[25]      E←(⊂5↑W)≡¨5↑¨C[;connections_ COL 'window']          ⍝   Matching extents[26]   :end[27]   Z←MV ⋄ →(~∨/E)/0                                       ⍝If no matching extents, return MV[28]   :if P≡1                                                ⍝If asking for multiple connections,[29]     Z←E/⍳⍴E                                              ⍝   don't look for best match; return them all[30]     →0[31]   :end[32]   Z←''⍴E/⍳⍴E ⋄ →((1=+/E)∨P≡'')/0                         ⍝If only 1 match or no path specified, return 1st connection[33]   D←C[;connections_ COL 'drive'] FIND STRIPDRIVE P       ⍝More than one extent matches, so do best match based on drive[34]   →((⍴D)≥Z←(D^E)⍳1)/0                                    ⍝If one or more matches for extent and drive, return the first[35]  ⍝  Q←E∨D∨0∊¨⍴¨C[;connections_ COL 'drive']    OLD AND WRONG            ⍝If no matches with drive, accept one undefined drive[36]   Q←E^0∊¨⍴¨C[;connections_ COL 'drive']                  ⍝If no matches with drive, accept one undefined drive[37]   →((⍴Q)≥Z←Q⍳1)/0[38]   Z←E⍳1                                                  ⍝Final fallback is to take first extent that matches[39]  [40]  [41]  [42]  [43]  [44]   →0[45]  ⍝Test code:[46]  [47]   CLEANUP[48]   GRIDINIT 'glyptemys' 3339 'C:'[49]   MAKEWINDOW 15 12 0 0 10[50]   1 GRIDINIT 'glyptemys' 3338 'D:'[51]   MAKEWINDOW 8 6 0 0 20[52]   1 GRIDINIT 'glyptemys' 3337 'D:'[53]   MAKEWINDOW 15 12 0 0 10[54]   1 GRIDINIT 'glyptemys' 3336[55]   FINDCONNECTION 15 12 0 0 30[56]  [57]  [58]   CLEANUP ⋄ GRIDINIT 'glyptemys' 3339 'C:' ⋄ MAKEWINDOW 15 12 0 0 10 ⋄ 1 GRIDINIT 'glyptemys' 3338 'D:' ⋄ MAKEWINDOW 8 6 0 0 20 ⋄ 1 GRIDINIT 'glyptemys' 3337 'D:' ⋄ MAKEWINDOW 15 12 0 0 10 ⋄ 1 GRIDINIT 'glyptemys' 3336 ⋄ FINDCONNECTION 15 12 0 0 30    ∇