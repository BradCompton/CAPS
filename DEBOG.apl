    ∇ DEBOG;Z;Q;head;I;U;C;S;E;R;J;T;D;K;L;N;B;W;F;V;Y;P;A[1]   ⍝Clean up stream centerlines where they run through cranberry bogs and salt marshes[2]   ⍝This is step 2, runs after makestreams.aml, and before makestreams2.aml[3]   ⍝Source:[4]   ⍝   bogcenter.txt       Centroids of bogs[5]   ⍝   fullstreams.txt     Stream centerlines (x1, y1, x2, y2, bogmarsh-id, type)[6]   ⍝                       type = 1 for cranberry bogs, type = 2 for salt marshes[7]   ⍝Result:[8]   ⍝   editstreams.txt     simplified streams through bogs (table version)[9]   ⍝   editstreams_g.txt   version for generatelines.aml[10]  ⍝B. Compton, 29 Jul-3 Aug 2010[11]  ⍝22 Nov 2013: don't keep vector data in memory--it leads to inter-run interactions in Anthill![12]  [13]  [14]  [15]   P←1000 100     ⍝Minimum length of inflowing streams to keep (m), number of steps to look upstream in bogs[16]   SETPATHS[17]   SETBREAK[18]  [19]  [20]   ⍞←'Reading vector data...' ⋄ FLUSH[21]   C←MATIN pathW,'bogcenter.txt'[22]   F←(0,',',0,1) MATIN pathW,'fullstreams.txt'[23]  L2:⎕←'done' ⋄ FLUSH[24]   F←(~^/F[;1 2]=F[;3 4])⌿F                   ⍝Drop "point" lines[25]  →L17[26]  ⍝----- First, do cranberry bogs -----[27]   U←(C[;1]∊(F[;6]=1)/F[;5])/C[;1]            ⍝Unique bogs (only those with streams in them)[28]   ⎕←(⍕⍴U),' cranberry bogs with streams' ⋄ FLUSH[29]   I←0[30]  L3:→((⍴U)<I←I+1)/L17                        ⍝For each bog,[31]   BREAKCHECK[32]   Q←(F[;5]=U[I])⌿F                           ⍝   Streams in this bog[33]   W←(2 2/¯1 1×2000)+(⌊⌿T),⌈⌿T←((2×1↑⍴Q),2)⍴Q[;⍳4] ⍝   Window 2 km around bog[34]   B←(∨/F[;1 3]≥W[1])^(∨/F[;2 4]≥W[2])^(∨/F[;1 3]≤W[3])^∨/F[;2 4]≤W[4][35]   R←B⌿F                                      ⍝   Clip this window out of fullstreams; we'll put it back later[36]   F←(~B)⌿F[37]   R←(R[;5]≠U[I])⌿R                           ⍝   Drop this bog's streams from R[38]  [39]   S←(~(↓Q[;1 2])∊↓Q[;3 4])⌿Q[;1 2]           ⍝   Origin points of streams[40]   S←(((↓S)⍳↓S)=⍳1↑⍴S)⌿S                      ⍝   unique points[41]   E←(~(↓Q[;3 4])∊↓Q[;1 2])⌿Q[;3 4]           ⍝   and end points[42]   E←(((↓E)⍳↓E)=⍳1↑⍴E)⌿E[43]   ⍞←'Bog ',(⍕U[I]),' (with ',(⍕1↑⍴Q),' segments) has ',(⍕1↑⍴S),' inflows and ',(⍕1↑⍴E),' outflows...' ⋄ FLUSH[44]   D←(1↑⍴S)⍴0[45]   J←0[46]  L4:→((1↑⍴S)<J←J+1)/L14                      ⍝   For each starting point,[47]   L←(R[;3 4]^.=S[J;])/⍳1↑⍴R                  ⍝      Source stream(s)[48]   →(0∊⍴L)/L4                                 ⍝      If none, drop this starting point[49]   Y←(1↑⍴R)⍴1[50]   W←K←0[51]  L5:L←L,(R[;3 4]^.=R[L[K←K+1];1 2])/⍳1↑⍴R    ⍝      follow it upstream[52]  [53]  [54]  L6:→(~(⊂,R[L[N←,K];1 2])∊↓E)/L11            ⍝      If we've reached an exit point,[55]   V←0                                        ⍝         Keep endpoint[56]  L7:→(1≥+/T←R[;1 2]^.=,R[L[N[⍴N]];3 4])/L8   ⍝         Loop: If reached divergence,[57]   V←1                                        ⍝            we'll keep the endpoint[58]   D[J]←0                                     ⍝            Drop start point (but keep exit point)[59]   W←1                                        ⍝            keep lines in L[60]   N←(N≤⍴L)/N←L⍳T/⍳1↑⍴R                       ⍝            and forget everything above the divergence[61]   →(0∊⍴N)/L11[62]   →L7[63]  L8:→(1≥+/R[;3 4]^.=,R[L[N[⍴N]];3 4])/L9     ⍝         If reached convergence,[64]   →L10                                       ⍝            and finish[65]  L9:→(^/S[J;1 2]=,R[L[N[⍴N]];3 4])/L10       ⍝         If reached start point, finish[66]   N←N,L⍳T/⍳1↑⍴R                              ⍝         Next segment[67]   →L7[68]  L10:E←(V∨~E^.=R[L[K];1 2])⌿E                ⍝         Finish: Drop exit point (unless V)[69]   Y[L[N]]←0                                  ⍝            And drop all lines in N[70]   L←(N←~(⍳1↑⍴L)∊N)⌿L[71]   K←K-+/K↑~N                                 ⍝            and adjust K[72]  [73]  [74]  L11:→((K<P[2])^K<⍴L)/L5                     ⍝      Until we've run out or looked at 100 segments[75]   D[J]←1                                     ⍝      We'll keep it, provisionally[76]   →((3>+/L=''⍴¯1↑L)^K≥P[2])/L13              ⍝      If we've looked at whole stream (or hit a loop),[77]   D[J]←P[1]≤⌈/(+/((((⍴L),2)⍴S[J;1 2])-R[L;1 2])*2)*.5 ⍝         keep branch if max distance is at least 1 km[78]   →D[J]/L4                                   ⍝         Otherwise,[79]   B←(1↑⍴R)⍴1[80]   B[L]←0[81]   R←((B∨W)^Y)⌿R                              ⍝         Erase all lead-in streams and all streams dropped from entrance-exit search[82]   →L4[83]  L13:R←Y⌿R                                   ⍝      Else, just drop pending deletions[84]   →L4[85]  [86]  L14:S←D⌿S                                   ⍝   Drop starting points we don't like[87]   →(~0∊⍴S)/L15                               ⍝   If all dropped,[88]   R←(R[;5]≠U[I])⌿R                           ⍝      Drop all streams in this bog[89]  [90]  [91]  L15:⎕←'down to ',(⍕1↑⍴S),' inflows and ',(⍕1↑⍴E),' outflows.' ⋄ FLUSH[92]   ⍝Could drop some of multiple outflows here, but I have no basis to choose[93]   Z←S,((1↑⍴S),2)⍴T←C[C[;1]⍳U[I];2 3]         ⍝   Line from each start to centroid[94]   Z←Z⍪(((1↑⍴E),2)⍴T),E                       ⍝   and from centroid to each end point[95]  L16:R←R⍪(Z,U[I]),1[96]   F←F⍪R                                      ⍝   put data back into fullstreams[97]   →L3[98]  [99]  [100] ⍝----- Now do salt marshes -----[101] L17:U←(C[;1]∊(F[;6]=2)/F[;5])/C[;1]         ⍝Unique salt marshes (only those with streams in them)[102]  ⎕←(⍕⍴U),' salt marshes with streams' ⋄ FLUSH[103] [104] [105]  I←0[106] L18:→((⍴U)<I←I+1)/L19                       ⍝For each salt marsh,[107] [108]  BREAKCHECK[109]  Q←(F[;5]=U[I])⌿F                           ⍝   Streams in this marsh[110]  W←(2 2/¯1 1×2000)+(⌊⌿T),⌈⌿T←((2×1↑⍴Q),2)⍴Q[;⍳4] ⍝   Window 2 km around marsh[111]  B←(∨/F[;1 3]≥W[1])^(∨/F[;2 4]≥W[2])^(∨/F[;1 3]≤W[3])^∨/F[;2 4]≤W[4][112]  R←B⌿F                                      ⍝   Clip this window out of fullstreams; we'll put it back later[113]  F←(~B)⌿F[114] [115]  S←(~(↓Q[;1 2])∊↓Q[;3 4])⌿Q[;1 2]           ⍝   Origin points of streams[116]  S←(((↓S)⍳↓S)=⍳1↑⍴S)⌿S                      ⍝   unique points[117]  E←(~(↓Q[;3 4])∊↓Q[;1 2])⌿Q[;3 4]           ⍝   and end points[118]  E←(((↓E)⍳↓E)=⍳1↑⍴E)⌿E[119]  ⍞←'Marsh ',(⍕U[I]),' (with ',(⍕1↑⍴Q),' segments) has ',(⍕1↑⍴S),' inflows and ',(⍕1↑⍴E),' outflows...' ⋄ FLUSH[120]  Z←0 4⍴0[121]  A←J←0[122] L44:→((1↑⍴S)<J←J+1)/L141                    ⍝   For each starting point,[123]  L←(R[;3 4]^.=S[J;])/⍳1↑⍴R                  ⍝      Source stream(s)[124]  →(0∊⍴L)/L44                                ⍝      If none, drop this starting point[125]  K←0[126] L61:L←L,(R[;3 4]^.=R[L[K←K+1];1 2])/⍳1↑⍴R   ⍝      Loop: follow it upstream to make sure it's worth keeping[127]  →(P[1]≤((R[L[K];1 2]-S[J;])*2)*.5)/L60     ⍝         stream is worth keeping if it's at least 1 km away[128]  →(K>1E4)/L60                               ⍝         also keep stream if it has an infinite loop (nothing else we can do...)[129]  →(K<⍴L)/L61                                ⍝      Until we've run out or looked at 100 segments[130]  R←(~(⍳1↑⍴R)∊L)⌿R                           ⍝      If we've looked at the whole thing and not gotten 1 km, drop all these segments[131]  →L44[132] [133] L60:L←(R[;1 2]^.=S[J;])/⍳1↑⍴R               ⍝      first segment[134]  K←0[135] L55:→(K≥1↑⍴L)/L56                           ⍝      Loop: if not done[136]  →((⊂R[L[K←K+1];3 4])∊↓E)/L55               ⍝         stop at endpoints[137]  L←L,(~T∊L)/T←(R[;1 2]^.=R[L[K];3 4])/⍳1↑⍴R ⍝         follow downstream - but don't repeat[138]  →L55[139] [140] L56:Z←Z⍪R[L;⍳4]                             ⍝      Keep these streams[141]  A←A+1[142]  →L44[143] [144] L141:R←(~R[;5]∊U[I])⌿R                      ⍝   Drop all streams in this marsh[145]  Z←Z[⍋Z;][146]  Z←(∨/Z≠1 0↓Z⍪0)⌿Z                          ⍝   Drop duplicate paths[147]  ⎕←'keeping ',(⍕1↑⍴Z),' segments with ',(⍕A),' inflows.' ⋄ FLUSH[148]  R←R⍪(Z,U[I]),2                             ⍝   and add back ones we're keeping[149]  F←F⍪R                                      ⍝   put data back into fullstreams[150]  →L18[151] [152] [153] L19:⍞←'Streams with edited cranberry bogs and salt marshes written to generate file ' ⋄ FLUSH[154]  (⎕←T←pathW,'editstreams_g.txt') GENERATELINES F      ⍝Write generate file[155]  ⎕←'Use &r generatelines ',T,', result to create a line coverage.'[156]  ⍞←'Edited stream table written to ' ⋄ FLUSH[157]  F CMATOUT ⎕←pathW,'editstreams.txt'[158]  editstreams←F[159]  ⎕←'Ready to run STREAMFLOW (as metric) on cluster'    ∇