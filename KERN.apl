    ∇ Z←H KERN X;T;I;J;K;L;V;Q;E;F;C;D[1]   ⍝Do standard (non-resistant) kernel estimator for matrix ⍵, h = ⍺[1]; edge corrections if ⍺[2][2]   ⍝Each kernel's volume is standardized to 1, and multiplied by ⍵[3]   ⍝Also returns global self, value at each kernel's center (for later subtraction in neighbors-only analyses)[4]   ⍝⍺ and cellsize are in meters[5]   ⍝Global search sets search distance in standard deviations[6]   ⍝25 Sep 2003, B. Compton[7]   ⍝11 Jun 2011: add edge correction[8]   ⍝13 Jun 2011: Check for incomplete kernels - 30% speedup on huge bandwidths[9]   [10]  [11]  [12]   H←2↑H[13]   V←⌈H[1]×search÷cellsize                  ⍝Search distance[14]   X←T,X,T←((1↑⍴X),V)⍴MV                    ⍝Expand X to include edges around points[15]   X←T⍪X⍪T←(V,1↓⍴X)⍴MV[16]   D←1[17]   →(~H[2])/L0                              ⍝If doing edge correction,[18]   D←1-(2⍴V)↓(-2⍴V)↓H[1] KERN X=MV          ⍝   Get edge correction factor[19]  [20]  L0:Q←ZDENSITY (cellsize×DIST 1+2×V)÷H[1]  ⍝Bivariate kernel[21]   Q←Q×Q≥Q[⌈.5×1↑⍴Q;1]                      ⍝Avoid square artifacts[22]   Q←Q÷+/,Q                                 ⍝Standardize[23]   C←Q[⌈.5×1↑⍴Q;⌈.5×1↑⍴Q]                   ⍝Value at focal cell[24]   Z←self←(⍴X)⍴0[25]   I←0[26]  L1:→((1↑⍴X)<I←I+1)/L3                     ⍝For each row,[27]   BREAKCHECK[28]   →(^/X[I;]∊0,MV)/L1[29]   J←0[30]  L2:→((1↓⍴X)<J←J+1)/L1                     ⍝   For each column,[31]   →(X[I;J]∊0,MV)/L2[32]   K←(E←(K≥1)^K≤1↑⍴X)/K←I+T←(⍳1↑⍴Q)-⌈.5×1↑⍴Q⍝      Make window[33]   L←(F←(L≥1)^L≤1↓⍴X)/L←J+T[34]  [35]   →((^/E)^^/F)/L4                          ⍝      If incomplete kernel,[36]   Z[K;L]←Z[K;L]+X[I;J]×E⌿F/Q               ⍝         Slice and add kernel[37]   →L5[38]  L4:Z[K;L]←Z[K;L]+X[I;J]×Q                 ⍝         Else, just add kernel[39]  L5:self[I;J]←X[I;J]×C                     ⍝      And return values at focal cells[40]   →L2[41]  [42]  L3:Z←Z÷D    ∇