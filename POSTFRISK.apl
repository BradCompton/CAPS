    ∇ F←A POSTFRISK C;Q;Z;warnings;E;X;Y;loop;test;noread;grids;ffile;dot;D;I;pars;warn;fn;M;J;ifchat;T;L[1]   ⍝Frisk inputs for ⍵ (either POST or SCENARIOS) and set global variables; frisk despite regionalpost if ⍺; return 1 if failure[2]   ⍝Reads all inputs to POST and does lots of error-checking[3]   ⍝B. Compton, 6 Apr 2011.  The garden is finally clear of snow, but still quite a bit in the fields and woods.[4]   ⍝27 Jun 2011: Check proper grids when doing mixmetrics[5]   ⍝16 Nov 2011: use resultpath[6]   ⍝20 Dec 2011: name indices used; 11 Jan 2012: give error if names are too long[7]   ⍝3 Jan 2012: pass in 'post' or 'scenarios'[8]   ⍝6 and 9 Feb 2012: if errors, bail before checking metric grids; other issues with error reporting[9]   ⍝13 Jul 2012: if called from SCENARIOS, don't check metrics grids--assume they're okay[10]  ⍝19 Sep 2012: read landcover, for INCLUDE[11]  ⍝25 Sep 2012: return line number in log file for error reporting[12]  ⍝3 May 2013: don't frisk if mixonly[13]  ⍝14 Jun 2013: dumb bug removing MVs from postland[14]  ⍝28 Jun 2013: frisk for missing cover types in usegroups[15]  ⍝27 Jan 2014: use SETTILE instead of noread←1 nonsense[16]  ⍝17 Mar 2014: check parameters for REGIONALPOST[17]  ⍝20 Feb 2015: use inputs_metrics.par for metric name replacement (can't use inputs.par thanks to collisions)[18]  ⍝27 May 2015: Fix frisking from REGIONALPOST[19]  ⍝23 Jul 2015: minor bug: strip paths before complaining about missing mixed metrics[20]  [21]  [22]  [23]   ⍎(0=⎕NC'A')/'A←0'   ⍝By default, friskanyway is 0[24]  [25]  ⍝First, check options[26]   ifchat←0[27]   Z←warnings←0 0⍴''[28]   pars←NREAD pathI PATH 'parameters.par'[29]   warn←0[30]  [31]   READPARS fn←'caps'[32]   READPARS fn←C[33]  [34]   refgrid←1 GRIDNAME 'reference'[35]   mask←(IFEXISTS mask,'\')/mask←1 GRIDNAME 'mask'[36]   landcover←¯1 TABLE landcoverpar[37]   T←⍎(gradient+1)⊃'''''' '⍕scale'[38]   L←5+COUNTLINES T←pathP PATH 'post',T,'.log'           ⍝Find line number in log file[39]   T LOG '--- Starting run of ',(TOUPPER C),', ',NOW,' ---'[40]   F←0 L                       ⍝Clear failure flag[41]   →(~E←CHECKPARS ,⊂C)/L1[42]   Z←Z OVER ('~Error ¦ Missing or incorrect options under [',C,'] in parameters.par:') OVER ' ',' ',' ',warnings[43]   →L13[44]  [45]  ⍝Now, read parameters and set global variables[46]  L1:POSTSOURCE C[47]  [48]  ⍝Set source and results for all POST functions[49]   source←path PATH (1+0∊⍴source)⊃source pathR[50]   results←path PATH (1+0∊⍴results)⊃results (pathE,resultpath)[51]  [52]   →(regionalpost^~A)/0            ⍝If called from BENCH or POSTSCALE within REGIONALPOST, we're done now, but not if called from REGIONALPOST directly[53]  [54]   Z←((TOUPPER C),': ',(('post' 'scenarios'⍳⊂C)⊃'Post-processing' 'Processing scenarios'),' for landcover ',(grid),' and model ',model,(C≡'scenarios')/' given ',scenarios) OVER Z[55]   Z←Z OVER (~0∊⍴alt)/'> > >  Using alternate landcover and model: ',alt[56]   Z←Z OVER '   For ',((1+1≠⍴D)⊃'index' 'indices'),':',⍕D←((D⍳D)=⍳⍴D)/D←index[57]  [58]   E←~0∊⍴T←(8<⊃,/⍴¨D)/D[59]   Z←Z OVER E/'~Error ¦ Index names too long (max is 8 characters):',⍕T[60]   →mixonly/0     ⍝If mixonly, don't FRISK[61]  [62]  [63]  ⍝If called from SCENARIOS with usegroups, make sure group file has all landcover types[64]   :if C≡'scenarios'[65]      :if 0≠⍴usegroups[66]         X←1 0 TABLE pathI PATH usegroups[67]         X←(~0∊¨⍴¨X)/X←X[;2][68]         X←((⍳⍴X),[1.5]X) SYNONYMS pathI PATH synonymspar[69]         :if ~0∊⍴X←MIX (~landcover[;2]∊X[;2])/landcover[;2][70]            Z←Z OVER '~Warning ¦ Missing landcover types in groups file ',usegroups,' (missing developed types and types not in postland are okay):'[71]            Z←Z OVER ' ',' ',' ',(100⌊⎕PW) TELPRINT X[72]         :end[73]      :end[74]   :end[75]  [76]  ⍝Make sure landcover grid exists[77]   E←E∨Q←~IFGRIDEXISTS grid[78]   Z←Z OVER Q/'~Error ¦ Source landcover grid doesn''t exist: ',grid[79]  [80]  [81]  ⍝Make sure source directory exists[82]   E←E∨Q←~IFEXISTS source[83]   Z←Z OVER Q/'~Error ¦ Source directory doesn''t exist: ',source[84]  [85]  [86]  ⍝Create result directory if necessary[87]   →(IFEXISTS results)/L3[88]   →(~2⊃MAKEPATHS results)/L2[89]   E←1[90]   Z←Z OVER '~Error ¦ Couldn''t create result directory: ',results[91]   →L3[92]  L2:Z←Z OVER '~Note ¦ Creating result directory: ',results[93]  [94]  [95]  ⍝Make sure metric grids exist[96]  L3:→(E∨C≡'scenarios')/L6                    ⍝Skip this if lookup errors or if we're called from SCENARIOS -- assume it's right[97]   M←(1+0≠⍴T)⊃ postmetrics (T←FRDBL¨↓MATRIFY '' VALUE 'includemetrics')  ⍝If includemetrics, use instead of metrics in postmodel.par[98]   M←(⊂source) PATH¨(⊂0 'inputs_metrics') GRIDNAME¨M  ⍝Find full paths for source grids[99]  [100]  →(0=⎕NC'mixmetrics')/L4[101]  →(~mixmetrics)/L4                          ⍝If doing mixmetrics,[102]  Q←(TABLE pathI PATH 'mixmetrics.par')[;1][103]  J←(TOUPPER¨FRDBL¨STRIP¨M)⍳TOUPPER¨FRDBL¨STRIP¨Q  ⍝   Look for appropriate input grids[104]  J←(J≤⍴M)/J                                 ⍝   don't care about stuff in mixmetrics.par if it's not in model[105]  M[J]←M[J],¨'0'[106] L4:→(^/Q←⊃,/IFGRIDEXISTS¨M)/L5[107]  E←1[108]  Z←Z OVER '~Error ¦ Missing metrics (grids named in model ',model,' not in ',source,'):'[109]  Z←Z OVER ' ',' ',' ',(100⌊⎕PW) TELPRINT MIX(~Q)/M[110]  →L13[111] [112] L5:→(~regionalpost)/L51                     ⍝If called from REGIONALPOST,[113] ⍝Do REGOINALPOST frisking[114]  Q←(~Q≡¨⊂'full')/Q←FRDBL¨↓MATRIFY regionmaps⍝   check for regionmaps (but not 'full')[115]  →(0∊⍴Q)/L51[116]  T←⊃,/IFGRIDEXISTS¨Q←GRIDNAME¨(⊂regionpath) PATH¨Q[117]  :if 0∊T[118]     E←1[119]     Z←Z OVER '~Error ¦ Missing regionmap grids:'[120]     Z←Z OVER ' ',' ',' ',(100⌊⎕PW) TELPRINT MIX(~T)/Q[121]  :end[122] [123] ⍝Make sure grids align[124] L51:E←E∨~0∊⍴Q←ALIGN grid OVER MIX M[125]  Z←Z OVER Q[126] [127] [128] ⍝Make sure all communities named in postmodel are named in landtypes (unless landtypes = '')[129] L6:→(0∊⍴landtypes)/L7[130]  →(0∊⍴badnames)/L7[131]  E←1[132]  Z←Z OVER '~Error ¦ Names used in model ',model,' that don''t ocurr in ',landtypes,':'[133]  Z←Z OVER ' ',' ',' ',(100⌊⎕PW) TELPRINT 2 0↓badnames[134] [135] [136] ⍝Make sure all values in landcover grid exist in landcover table, but only if checkland = yes[137] L7:→(E∨~checkland)/L12                  ⍝This takes a while, so only do it if asked[138]  LOG 'Checking landcover values against ',landtypes,'...'[139] [140]  Q←landcover[;1][141]  loop←test←noread←0                     ⍝Silly junk for BLOCK, etc.[142]  grids←0 0⍴''[143]  Y←⍳0[144]  BLOCK (2⍴blocksize),0[145]  SETTILE[146]  ffile←'POSTFRISK'[147]  D←TILEMAP grid blocksize 0[148] [149]  I←0[150] L8:→(~D[I←I+1])/L9[151]  DOT[152]  BREAKCHECK[153]  X←,READ grid                           ⍝While there are blocks to read,[154]  Y←((X⍳X)=⍳⍴X)/X←Y,X                    ⍝   Find unique values in landcover[155] L9:→(0≠NEXTBLOCK)/L8[156] L10:Y←(Y≠MV)/Y←Y[⍋Y][157]  →(0∊⍴Q←(~Y∊landcover[;1])/Y)/L11[158]  E←1[159]  Z←Z OVER '~Error ¦ Unknown values in landcover grid ',grid,' (not in ',landtypes,'):'[160]  Z←Z OVER ' ',' ',' ',(⎕PW-3) TELPRINT MATRIFY ⍕Q[161] [162] [163] ⍝Warn about types in landtypes that aren't in community model (should all be developed)[164] L11:Z←Z OVER '~Note ¦ Classes in both ',landtypes,' and grid ',grid,' that aren''t in model ',model[165]  Z←Z OVER '(These should all be developed and excluded communities)'[166]  Z←Z OVER ' ',' ',' ',(100⌊⎕PW) TELPRINT MIX ((landcover[;1]∊Y)^~landcover[;1]∊weights[;1])⌿landcover[;2][167] [168] [169] [170] ⍝Report all ⎕STOPs[171] L12:X←(⊃,/0≠⍴¨⎕STOP¨↓X)⌿X←((⌽RJUST ⎕NL 3)[;1]≠'c')⌿⎕NL 3[172]  →(0∊⍴X)/L13[173]  Z←Z OVER '~Warning ¦ ⎕STOP set in functions:'[174]  Z←Z OVER ' ',' ',' ',(⎕PW-3) TELPRINT X[175] [176] [177] L13:⍝Finish up and report everything in log[178]  Z←Z OVER (~E)/(C≡'post')/'~Note ¦ POST will check for missing values in metrics during BENCH and POSTSCALE phases'[179]  Z←(∨/Z≠' ')⌿Z[180]  Z←(~0∊⍴Z)⌿'-'⍪(Z⍪' ')⍪'-'[181]  Z←('.~.',⎕TCNL) TEXTREPL MTOV Z[182]  LOG Z[183] [184]  →(~E)/L14                              ⍝If any errors,[185]  LOG '*** POST run cannot continue because of errors.'[186]  F←1 L[187]  →0                                     ⍝   bail out completely[188] L14:→(~friskonly)/0                     ⍝If only frisking,[189]  LOG 'POST exiting.  (friskonly = yes)'[190]  F←1 L                                  ⍝   bail out completely    ∇