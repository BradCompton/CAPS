    ∇ ASSESSBENCHMARKS;D;M;T;I;X;R;J;X_;head;C;Q;Z;P;U;B;E;L;E1;R1;K;source[1]   ⍝Summarize regional benchmark files[2]   ⍝Run this after REGIONALPOST to summarize number of cells in each community/region[3]   ⍝Optional <region>.txt for each region map has region names[4]   ⍝B. Compton, 24-25 Mar 2014[5]   [6]   [7]   [8]   ⍝ source←'postmodel.par' 1           ⍝Source file of communities and column number of names in file[9]    source←landcoverpar 2[10]  [11]   INIT[12]   D←⎕LIB pathE,'benchmarks\'         ⍝List of benchmark files[13]   D←((0 9↓D)[;1]='1')⌿0 11↓D         ⍝Only want benchmarks from pass 1[14]   D←LJUST 0 ¯4↓RJUST D               ⍝Drop .csv.  Now have regionmap_region[15]   D←FRDBL¨↑↓¨'_' MATRIFY¨↓D          ⍝Now regionmap region[16]   D[;2]←(⊂'')⍴¨⎕FI¨ D[;2]            ⍝Regions are numeric[17]   M←((T⍳T)=⍳⍴T)/T←D[;1]              ⍝List of region maps[18]  [19]   Q←(1 ⎕TCHT MATIN pathI,1⊃source)[;2⊃source][20]   C←LOOKUP (⍳⍴Q),[1.5]Q[21]   C[;2]←Q[C[;2]]                     ⍝build community class - community index[22]   C←C[⍋MIX C[;2];][23]  [24]   L←0 0⍴''[25]   I←0[26]  L1:→((⍴M)<I←I+1)/L4                 ⍝For each regionmap,[27]   R←(D[;1]≡¨M[I])/D[;2]              ⍝   list of regions[28]   R←R[⍋R][29]  [30]   Z←((1↑⍴C),⍴R)⍴0                    ⍝   We'll build a community × region cell count table[31]   J←0[32]  L2:→((⍴R)<J←J+1)/L3                 ⍝   For each region,[33]   X←MATIN pathE,'benchmarks\benchmark1_',(I⊃M),'_',(⍕J⊃R),'.csv'[34]   →(X≡1 1⍴MV)/L2                     ⍝      skip if empty file[35]   X_ ← FRDBL¨↓MATRIFY head[36]   X←X[;X_ COL 'community count']     ⍝      Just want community & count[37]   X←((T⍳T)=⍳⍴T←X[;1])⌿X              ⍝      Only want one row per community[38]   Z[C[;1]⍳X[;1];J]←X[;2]             ⍝      Cell counts for this region[39]   →L2[40]  [41]  L3:Z←(B←∨/Z≠0)⌿Z                    ⍝   Drop communities that are never used[42]   C←B⌿C[43]  [44]   B←~C[;2]≡¨' '⍪¯1↓C[;2]             ⍝   Collapse duplicate community rows[45]   Z←⍉↑(⊂B) pSUM¨↓[1]Z[46]   E←B/C[;2][47]  [48]   :if IFEXISTS T←pathI,(I⊃M),'.par'  ⍝   If <regions>.txt exists,[49]      Q←0 ⎕TCHT MATIN T[50]      R←Q[Q[;1]⍳R;2]                  ⍝      use region names instead of numbers[51]   :end[52]  [53]   L←L OVER 'Region map: ',I⊃M[54]   L←L OVER '   ',(⍕⍴R),' regions'[55]   L←L OVER '   ',(⍕⍴E),' communities'[56]   L←L OVER ''[57]  [58]   head←''[59]   Q E1 R1 ← Z E R[60]  ⍝THIS SORTING SUCKS, SO FORGET IT[61]  ⍝ :for K :in ⍳20                     ⍝   Now sort cell-in table a few times on both dimensions[62]  ⍝    Q←Q[T←⍒(+/Q<1E4)+(2×+/Q<1000)+(3×+/Q<100)+4×+/Q<10;][63]  ⍝    E1←E1[T][64]  ⍝    Q←Q[;T←⍒(+⌿Q<1E4)+(2×+⌿Q<1000)+(3×+⌿Q<100)+4×+⌿Q<10][65]  ⍝    R1←R1[T][66]  ⍝ :end[67]  [68]   Q←,Q[69]   Q[(Q=0)/⍳⍴Q]←⊂''[70]   Q←((M[I]),R1)⍪E1,(⍴Z)⍴Q[71]   Q CMATOUT T←pathE,'benchmarks\cells-in-',(I⊃M),'.csv'[72]   ⎕←'   ',T ⋄ FLUSH[73]  [74]   P←(Z+1E6×Z=0)∘.<10 100 1000 1E4[75]   Q←E,(+/Z≠0),+/[2]P[76]   Q←(∨/0 2↓Q≠0)⌿Q[77]   Q←Q[⍒(0 2↓Q)÷(0 ¯2+⍴Q)⍴Q[;2];][78]   Q←(FRDBL¨↓MATRIFY'Community regions <10 <100 <1000 <10k')⍪Q[79]   Q CMATOUT T←pathE,'benchmarks\problem-communities-in-',(I⊃M),'.csv'[80]   ⎕←'   ',T ⋄ FLUSH[81]  [82]   Q←R,(+⌿Z≠0),+⌿P[83]   Q←(∨/0 2↓Q≠0)⌿Q[84]   Q←Q[⍒(0 2↓Q)÷(0 ¯2+⍴Q)⍴Q[;2];][85]   Q←(FRDBL¨↓MATRIFY'Region communities <10 <100 <1000 <10k')⍪Q[86]   Q CMATOUT T←pathE,'benchmarks\problem-regions-in-',(I⊃M),'.csv'[87]   ⎕←'   ',T ⋄ FLUSH[88]   →L1[89]  [90]  L4:(1↓MTOV L) NWRITE pathE,'ASSESSBENCHMARKS-summary.txt'[91]   ⎕←'Done' ⋄ FLUSH    ∇