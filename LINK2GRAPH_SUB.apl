    ∇ N LINK2GRAPH_SUB I;J;L;E;C;O;T[1]   ⍝Recursive subroutine for LINK2GRAPH and LINK2GRAPHB: recurse up stream network from cell, length, cost, and iei ⍵ for nodeid and outflow flag ⍺, collecting nodes and edges[2]   ⍝Global inputs:[3]   ⍝   flow (D8 flow for stream centerlines), iei, cost (cost of natural resistance), crossdam (resistance of culverts & dams), and subs (sub watersheds)[4]   ⍝Globally accumulated:[5]   ⍝   nid (node id)[6]   ⍝Global results:[7]   ⍝   nodes, edges [8]   ⍝B. Compton, 11-24 Jul 2017 (yesterday we caught a yellow-billed cuckoo!)[9]   ⍝14 Aug 2017: rework the way I deal with nodes at outflows[10]  ⍝29 Aug 2017: ouch--go to 6-digit nodes...only needed because I'm testing with 30 m internodes[11]  ⍝20 Dec 2017: was using 1.4 for diagonals, but AQCONNECT doesn't, so I shouldn't here so they match better[12]  ⍝28 Dec 2017: rework to take cost/length/IEI from half of origin cell and half of final cell to make symmetrical[13]  ⍝25-26 Jan 2018: I did that wrong...completely rewrite to clarify flow & work properly[14]  [15]   [16]   [17]   N O ← N                                            ⍝Node id and outflow flag (set if called from above at outflow)[18]   L C E←3↑2↓I                                        ⍝Passed length, cost, and IEI[19]   I←2↑I[20]  [21]  L1:                                                 ⍝For each stream cell,[22]   :if ~O                                             ⍝   If we're not at the outflow/origin, get 2nd half of cell we're moving from[23]      L←L+cellsize÷2                                  ⍝      accumulate a half cell of length from this cell to next--no diagonals![24]      C←C+cost[I[1];I[2]]÷2                           ⍝      accumulate a half cell of cost[25]      E←E+iei[I[1];I[2]]÷2                            ⍝      accumulate a half cell of IEI[26]   :end[27]  [28]   :if ∨/T←subs[;3 4]^.=I                             ⍝   if we've hit a subwatershed,[29]      edges←edges⍪N,(1E11+((T⌿subs)[1;1]×1E6)+1),L,C,E⍝      we know subwatershed's nodeid, so make our edge linking to it, and we're done with this stream segment[30]      →0[31]   :end[32]  [33]   J←flow FLOWINTO I                                  ⍝   streams flowing into this one[34]  [35]   :if (O∨crossdam[I[1];I[2]]≠MV)∨(1≠1↑⍴J)∨(L≥internode)              ⍝   If at the origin, a crossing or dam, a confluence, the end of the stream, or an internode,[36]      nodes←nodes⍪(nid←nid+~O),(1 FINDPOINT I),0⌈crossdam[I[1];I[2]]  ⍝      insert a node: node id, x, y, cost[37]      :if ~O                                                          ⍝      if we're not at the origin,[38]         edges←edges⍪N,nid,L,C,E                                      ⍝      save this edge: node1, node2, length, cost, and value (IEI)[39]         L C E ← 0                                                    ⍝      reset accumulating edge vaules      [40]      :end[41]      N←nid   [42]      ⎕ERROR((nid÷1E6)=⌊nid÷1E6)/'Error: more than 100,000 nodes in watershed at watershed ',1↓⍕⌊(nid-1)÷1E5[43]   :end[44]   [45]   L←L+cellsize÷2                                     ⍝   accumulate a half cell of length from this cell to next--no diagonals![46]   C←C+cost[I[1];I[2]]÷2                              ⍝   accumulate a half cell of cost[47]   E←E+iei[I[1];I[2]]÷2                               ⍝   accumulate a half cell of IEI[48]  [49]   :if 1≠1↑⍴J                                         ⍝   If multiple inflowing cells (or none),                                 [50]      (⊂nid 0) LINK2GRAPH_SUB¨(↓J),¨⊂L C E            ⍝      recurse up the network[51]   :else                                              ⍝   Otherwise, only following one cell[52]      I←,J                                            ⍝      update cell index[53]      O←0                                             ⍝      no longer at the origin[54]      →L1                                             ⍝      Next cell[55]   :end    ∇