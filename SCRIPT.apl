    ∇ SCRIPT M;framework;ifchat;refgrid;X;F;C;V;L;E;I;blocksize;pathZ;project;priority;owner;comment;Q;concurrent;yes;no;NO;No;YES;Yes;∆concurrent;T;O;error;host;pI[1]   ⍝Launch an Anthill project to run LCD script ⍵ (default path: model\scripts\)[2]   ⍝B. Compton, 18-30 Sep 2014[3]   ⍝3 Oct 2014: add concurrent and /options[4]   ⍝8 Feb 2015: set pathI to temporary path to protect .txt parameters; pass temporary path to QUANTILESCALE; use priority, etc. from parameters.par[5]   [6]   [7]   [8]    framework←'caps'[9]    INIT[10]   READPARS 'caps'[11]   ifchat←0[12]   blocksize←2000[13]   ∆concurrent←0[14]   NO←No←no←~YES←Yes←yes←1[15]   error←0[16]  [17]   F←(pathI,'scripts\') PATH M,(0∊⍴STRIPEXT M)/'.txt'[18]   :try[19]      X←VTOM ⎕TCNL,NREAD F[20]   :catch[21]      ⎕←(¯1+⎕DM⍳⎕TCNL)↑⎕DM[22]      →0[23]   :end[24]   X←(⍴X)⍴('.',⎕TCHT,'. ') TEXTREPL ,X                            ⍝Change tabs to spaces[25]   X←(∨/X≠' ')⌿X←FRDBL LJUST (⍴X)↑(+/(^\~(X=';')^0=+\1 ¯1 0['[]'⍳X]))⌽((⍴X)⍴' '),X            ⍝Strip comments (not inside of brackets!)[26]   F←FRDBL¨↓0 7↓((⎕NL 3)[;⍳7]^.='SCRIPT_')⌿⎕NL 3                  ⍝Script functions available[27]   C←∨/¨∨/(↓X)∘.⎕SS F                                             ⍝Lines with script function calls[28]   V←VTOM '.=.←' TEXTREPL MTOV '∆',(~C)⌿X                         ⍝Lines that set variables[29]   L←VTOM FIRSTCOL MTOV V                                         ⍝Local variable names[30]   V←MIX ((FRDBL¨↓0 1↓L)∊FRDBL¨↓MATRIFY 'mask project priority host owner comment')↓¨↓V  ⍝These are settings, not local variables[31]  [32]   X←C⌿X                                                          ⍝Lines with script function calls[33]   T←-+/(∨\(X='/')^~≠\X='''')                                     ⍝Find options[34]   O←'''',¨(T↑¨↓X),¨''''                                          ⍝Pull them out[35]   X←MIX T↓¨↓X                                                    ⍝And drop them[36]  [37]   X←(⊃,/'.',¨(FRDBL¨↓0 1↓L),¨'.',¨FRDBL¨↓L) WORDREPL MTOV X      ⍝Add ∆s to local variables in script[38]   X←(~(X='∆')^≠\X='''')/X                                        ⍝Remove ∆s from inside quotes to prevent perniciousness when local variables are part of grid names[39]   X←VTOM (⊃,/'.',¨F,¨'.',¨(⊂'''SCRIPT_'),¨F,¨⊂'''') WORDREPL X   ⍝And replace function call with SCRIPT_ function call, quoted[40]   X←(⍴X)⍴T\(T←,(X≠'=')∨≠\X='''')/,X                              ⍝Drop assignment = signs (but not in quoted expressions!)[41]  [42]   :if ~IFEXISTS pathP,'temp\'                                    ⍝If run\temp\ doesn't exist[43]      MAKEDIR pathP,'temp\'                                       ⍝   create it[44]   :end[45]   MAKEDIR pathZ←pathP,'temp\zzpars',(FRDBL 15 0⍕?1E15),'\' ⍝Create temporary path[46]   pathI COPYDIR pI←pathZ,'model\'                                ⍝Copy model path to temporary path and use temporary pathI for .txt files in scripts[47]  [48]   X←MIX (↓X),¨⊃¨(∨/¨(↓X)∘.⎕SS ⊂'SCRIPT_QUANTILE')⍴¨⊂⊂' ''',pathZ,''''   ⍝Special case for QUANTILESCALE, which needs a temporary path for strataindex[49]  [50]   ⎕←'Setting local variables' ⋄ FLUSH[51]   E←∨/⊃¨CATCH¨↓V ⋄ FLUSH                                         ⍝Set local variables[52]   ⎕←'Parsing script' ⋄ FLUSH[53]   concurrent←∆concurrent[54]   E←E∨∨/⊃¨X←CATCH¨↓X                                             ⍝Now APL parses body of script[55]   :if E                                                          ⍝If any errors, bail out[56]      T←⎕EX L                                                     ⍝   delete local variables[57]      →0[58]   :end[59]   X←2⊃¨X                                                         ⍝Parsed script[60]  [61]   BACKKILL (~0∊¨⍴¨STRIPPATH¨T)/T←1⊃¨X                            ⍝Backup and kill any result grids that aren't in temporary directory[62]  [63]  [64]   C←(⍴X)⍴0[65]   I←0[66]  L1:→((⍴X)<I←I+1)/L2                                             ⍝For each line of script, turn into call[67]      C[I]←⊂'Script: ',7↓(2⊃I⊃X)[68]      X[I]←⊂'' (pI,'scripts\')[1+(⊂'.txt')≡¨¯4↑¨I⊃X] PATHND¨I⊃X⍝   arguments ending in .txt default to scripts path[69]      :if 'SCRIPT_EXP'≡2⊃I⊃X                                      ⍝   If we're calling EXP, don't add path to expression[70]         Q←L (I⊃O) PARSEEXP I⊃X[71]         :if Q≡1[72]            E←1[73]         :else[74]            X[I]←⊂Q[75]         :end[76]      :else[77]         X[I]←⊂(pathZ PATHQUOTEMAC 1⊃I⊃X),' ',(⍕blocksize),' ',(I⊃O),' ',(2⊃I⊃X),(DISCLOSEALL ' ',¨(⊂pathZ) PATHQUOTEMAC¨2↓I⊃X),' ''',mask,''''[78]         E←E∨error[79]      :end[80]   →L1[81]  L2:T←⎕EX L                                                      ⍝now can delete local variables[82]   →E/0                                                           ⍝bail out if any errors[83]   X←MIX X                                                        ⍝Calls are 'result' SCRIPT_fn 'input1' 'input2' ... 'mask'[84]  [85]   :if cluster[86]      SCRIPTLAUNCH (↓X),[1.5]C[87]   :else[88]      SCRIPTRUN X[89]   :end    ∇